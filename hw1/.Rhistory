#TODO: code goes here.
v = seq(1, 25)
v
#TODO: code goes here.
v = seq(1, 25) * 2
v
#TODO: code goes here.
v = seq(1, 25) * 2
v = v * v
v
#TODO: code goes here.
v = seq(1, 25) * 2
v = v * v
mean(v)
#TODO: code goes here.
v = seq(1, 25) * 2
v = v * v
v = v - mean(v)
v
pbinom(5, 10, 0.5)
pbinom(7, 10, 0.5)
pbinom(2, 10, 0.5)
#TODO: code goes here.
v = seq(1, 25) * 2
v = v * v
v = v - mean(v)
v = v >= 0
v
#TODO: code goes here.
v = seq(1, 25) * 2
v = v * v
v = v - mean(v)
v = v >= 0
v = sum(v)
#TODO: code goes here.
v = seq(1, 25) * 2
v = v * v
v = v - mean(v)
v = v >= 0
v = sum(v)
v
?ppoints
ppoints(15, 0)
#TODO: code goes here.
is_even = function(n) {
if (n%%2 == 0) {
return (TRUE)
} else {
return (FALSE)
}
}
is_even(5)
is_even(6)
#TODO: code goes here.
is_even = function(n) {
if (n%%2 == 0) {
return TRUE
#TODO: code goes here.
is_even = function(n) {
if (n%%2 == 0) {
return (TRUE)
} else {
return (FALSE)
}
}
is_even(5)
is_even(6)
v = 1:25
v
v = 1:25
v = v * 2
v
v = 1:25
v = v * 2
v = v^2
v
v = 1:25
v = v * 2
v = v^2
v = v - mean(v)
v
v = 1:25
v = v * 2
v = v^2
v = v - mean(v)
v = v >= 0
v
v = 1:25
v = v * 2
v = v^2
v = v - mean(v)
v = v >= 0
v = sum(v)
v
v = 1:25
v = v * 2
v = v^2
v = v - mean(v)
v = v >= 0
#v = sum(v)
v = mean(v)
v
?ppoints
v = 1:25
v = v * 2
v = v^2
v = v - mean(v)
v = v >= 0
v = sum(v)
v
even_points = ppoints(15)
even_points
even_points = ppoints(15)
even_points
quantiles = qnorm(even_points)
quantiles
?factorial
funct = function(n, k){
return (factorial(n)/(factorial(n-k)*factorial(k)))
}
funct(5, 2)
funct = function(n, k){
if (k > n || k < 0) {
stop("k must be between 0 and n")
}
return (factorial(n)/(factorial(n-k)*factorial(k)))
}
funct(5, 2)
funct = function(n, k){
if (k > n || k < 0) {
stop("k must be between 0 and n")
}
return (factorial(n)/(factorial(n-k)*factorial(k)))
}
funct(5, 2)
funct(2, 5)
funct = function(n, k){
if (k > n || k < 0) {
stop("k must be between 0 and n")
}
return (factorial(n)/(factorial(n-k)*factorial(k)))
}
funct(5, 2)
#funct(2, 5)
funct(0, 7)
funct = function(n, k){
if (k > n || k < 0) {
stop("k must be between 0 and n")
}
return (factorial(n)/(factorial(n-k)*factorial(k)))
}
funct(5, 2)
#funct(2, 5)
#funct(0, 7)
roll_dice = function(n = 2) {
rolls = sample(1:6, size = n, replace = TRUE)
return(mean(rolls))
}
roll_dice()
roll_dice(5)
roll_dice = function(n = 2) {
rolls = sample(1:6, size = n, replace = TRUE)
return(mean(rolls))
}
roll_dice()
roll_dice(5)
roll_dice(1000)
roll_dice = function(n = 2) {
rolls = sample(1:6, size = n, replace = TRUE)
return(mean(rolls))
}
roll_dice()
roll_dice(5)
#roll_dice(1000)
roll_dice = function(n = 2) {
rolls = sample(1:6, size = n, replace = TRUE)
return(mean(rolls))
}
roll_dice()
roll_dice(5)
roll_dice(1000)
roll_dice = function(n = 2) {
rolls = sample(1:6, size = n, replace = TRUE)
return(mean(rolls))
}
roll_dice()
roll_dice(5)
roll_dice(1000)
roll_dice = function(n = 2) {
rolls = sample(1:6, size = n, replace = TRUE)
return(mean(rolls))
}
roll_dice()
roll_dice(5)
roll_dice(1000)
roll_dice = function(n = 2) {
rolls = sample(1:6, size = n, replace = TRUE)
return(mean(rolls))
}
roll_dice()
roll_dice(5)
roll_dice(1000)
roll_dice = function(n = 2) {
rolls = sample(1:6, size = n, replace = TRUE)
return(mean(rolls))
}
roll_dice()
roll_dice(5)
roll_dice(1000)
roll_dice = function(n = 2) {
rolls = sample(1:6, size = n, replace = TRUE)
return(mean(rolls))
}
roll_dice()
roll_dice(5)
roll_dice(1000)
roll_dice = function(n = 2) {
rolls = sample(1:6, size = n, replace = TRUE)
return(mean(rolls))
}
roll_dice()
roll_dice(5)
roll_dice(1000)
roll_dice = function(n = 2) {
rolls = sample(1:6, size = n, replace = TRUE)
return(mean(rolls))
}
roll_dice()
roll_dice(5)
roll_dice(1000)
roll_dice = function(n = 2) {
rolls = sample(1:6, size = n, replace = TRUE)
return(mean(rolls))
}
roll_dice()
roll_dice(5)
roll_dice(1000)
roll_dice = function(n = 2) {
rolls = sample(1:6, size = n, replace = TRUE)
return(mean(rolls))
}
roll_dice()
roll_dice(5)
roll_dice(1000)
roll_dice = function(n = 2) {
rolls = sample(1:6, size = n, replace = TRUE)
return(mean(rolls))
}
roll_dice()
roll_dice(5)
roll_dice(1000)
roll_dice = function(n = 2) {
rolls = sample(1:6, size = n, replace = TRUE)
return(mean(rolls))
}
roll_dice()
roll_dice(5)
roll_dice(1000)
roll_dice = function(n = 2) {
rolls = sample(1:6, size = n, replace = TRUE)
return(mean(rolls))
}
roll_dice()
roll_dice(5)
roll_dice(1000)
roll_dice = function(n = 2) {
rolls = sample(1:6, size = n, replace = TRUE)
return(mean(rolls))
}
roll_dice()
roll_dice(5)
roll_dice(1000)
roll_dice = function(n = 2) {
rolls = sample(1:6, size = n, replace = TRUE)
return(mean(rolls))
}
roll_dice()
roll_dice(5)
roll_dice(1000)
roll_dice = function(n = 2) {
rolls = sample(1:6, size = n, replace = TRUE)
return(mean(rolls))
}
roll_dice()
roll_dice(5)
roll_dice(1000)
roll_dice = function(n = 2) {
rolls = sample(1:6, size = n, replace = TRUE)
return(mean(rolls))
}
roll_dice()
roll_dice(5)
roll_dice(1000)
roll_dice = function(n = 2) {
rolls = sample(1:6, size = n, replace = TRUE)
return(mean(rolls))
}
roll_dice()
roll_dice(5)
roll_dice(1000)
roll_dice = function(n = 2) {
rolls = sample(1:6, size = n, replace = TRUE)
return(mean(rolls))
}
roll_dice()
roll_dice(5)
roll_dice(1000)
roll_dice = function(n = 2) {
rolls = sample(1:6, size = n, replace = TRUE)
return(mean(rolls))
}
roll_dice()
roll_dice(5)
roll_dice(1000)
roll_dice = function(n = 2) {
rolls = sample(1:6, size = n, replace = TRUE)
return(mean(rolls))
}
roll_dice()
roll_dice(5)
roll_dice(1000)
manual_sd <- function(x) {
n <- length(x)
x_mean <- mean(x)
squared_diffs <- (x - x_mean)^2
variance <- sum(squared_diffs) / (n - 1)
return(sqrt(variance))
}
manual_sd(c(1, 2, 3, 4, 5))
#TODO: code goes here.
is_even = function(n) {
if (n%%2 == 0) {
return (TRUE)
} else {
return (FALSE)
}
}
is_even(5)
is_even(6)
card_experiment = function(n = 1000) {
means = numeric(n)
deck = rep(1:13, 4)
for (i in 1:n) {
drawn_cards = sample(deck, size = 5, replace = FALSE)
drawn_cards = drawn_cards[!(drawn_cards %in% c(min(drawn_cards), max(drawn_cards)))]
means[i] = mean(drawn_cards)
}
return(means)
}
# Example usage:
results <- card_experiment(1000)
print(head(results))
#TODO: code for generating RVs and computing their running mean goes here.
n_trials = 10
p_success = 0.5
n_observations = 1000
observations = rbinom(n_observations, size = n_trials, prob = p_success)
running_means = running_mean(observations)
# define running average function
# can be specified as cumulative sum / index of element
running_mean <- function(vec) {
cumsum(vec) / seq_along(vec)
}
#TODO: code for generating RVs and computing their running mean goes here.
n_trials = 10
p_success = 0.5
n_observations = 1000
observations = rbinom(n_observations, size = n_trials, prob = p_success)
running_means = running_mean(observations)
#TODO: code for generating RVs and computing their running mean goes here.
n_trials = 10
p_success = 0.5
n_observations = 1000
observations = rbinom(n_observations, size = n_trials, prob = p_success)
running_means = running_mean(observations)
#TODO: plotting code goes here.
plot(running_means, type = "l", col = "blue", ylim = c(min(running_means), max(running_means)),
xlab = "Number of Observations", ylab = "Running Mean", main = "Running Mean of Binomial Distribution")
abline(h = n_trials * p_success, col = "red", lty = 2)
